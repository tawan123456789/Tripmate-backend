generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(uuid()) @db.Uuid @map("user_id")
  username           String            @unique
  gender             String            @default("Other")       
  fname              String
  lname              String
  birthDate          DateTime?         @db.Date @map("birth_date")
  role               String?
  email              String            @unique
  password           String
  profileImg         String?           @map("profile_img")
  phone              String?
  status             String?
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime?         @updatedAt     @map("updated_at")

  // back-relations
  ownedGroups        Group[]           @relation("GroupOwner")
  memberOf           UserJoinGroup[]
  services           UserService[]     @relation("ServiceOwner")
  ownedTripPlans     TripPlan[]        @relation("TripPlanOwner")
  discounts          Discount[]         @relation("DiscountOwner")
  reviews            Review[]
  bookmarks          Bookmark[]
  discountsMade      Discount[]        @relation("DiscountMaker")
  // hotels             Hotel[]
  // guides             Guide[]
  // carCenters         CarRentalCenter[]
  // restaurants        Restaurant[]

  @@map("User")
}

model Group {
  id          String          @id @map("group_id")
  ownerId     String          @map("owner_id") @db.Uuid
  groupName   String          @map("group_name")
  groupImg    String?         @map("group_img")
  status      String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  tripPlansId String?         @map("trip_plans_id")
  description String?         @default("No description") @map("description")
  profileImg  String?         @map("profile_img")
  bookings    Booking[]
  owner       User            @relation("GroupOwner", fields: [ownerId], references: [id])
  tripPlans   TripPlan?       @relation(fields: [tripPlansId], references: [id])
  members     UserJoinGroup[]

  @@index([ownerId])
  @@map("Group")
}

model UserJoinGroup {
  groupId  String   @map("group_id")
  userId   String   @map("user_id") @db.Uuid
  status   String?
  joinDate DateTime @default(now()) @map("join_date")
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
  @@map("UserJoinGroup")
}

model TripPlan {
  id        String     @id @map("trip_id")
  ownerId   String     @map("owner_id") @db.Uuid
  createAt  DateTime   @default(now()) @map("create_at")
  updateAt  DateTime?  @updatedAt @map("update_at")
  deleteAt  DateTime?  @map("delete_at")
  tripName  String     @map("trip_name")
  tripImg   String?    @map("trip_img")
  status    String?
  note      String?
  startDate DateTime?  @map("start_date") @db.Date
  endDate   DateTime?  @map("end_date") @db.Date
  groups    Group[]
  owner     User       @relation("TripPlanOwner", fields: [ownerId], references: [id])
  units     TripUnit[]

  @@index([ownerId])
  @@map("TripPlan")
}

model TripUnit {
  id             String    @id @map("unit_id")
  tripId         String    @map("trip_id")
  placeId        String    @map("place_id")
  timeStampStart DateTime  @map("time_stamp_start")
  duration       Int?
  status         String?
  note           String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  place          Place     @relation(fields: [placeId], references: [id])
  trip           TripPlan  @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([placeId])
  @@map("TripUnit")
}

model Place {
  id          String     @id @map("place_id")
  locationId  String?    @map("location_id")
  name        String
  description String?
  placeImg    String?    @map("place_img")
  location    Location?  @relation(fields: [locationId], references: [id])
  tripUnits   TripUnit[]

  @@index([locationId])
  @@map("Place")
}

model Location {
  id            String        @id @map("location_id")
  lat           Float
  long          Float
  name          String
  detail        String?
  status        String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime?     @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  country       String?
  province      String?
  address       String?
  district      String?
  street        String?
  zipCode       String?       @map("zip_code")
  places        Place[]
  servicesByLoc UserService[] @relation("ServiceLoc")

  @@map("Location")
}

model UserService {
  id              String           @id @map("service_id")
  ownerId         String           @map("owner_id") @db.Uuid
  locationId      String?          @map("location_id")
  name            String
  description     String?
  serviceImg      String?          @map("service_img")
  status          String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  type            String?
  bookings        Booking[]
  bookmarks       Bookmark[]
  carRentalCenter CarRentalCenter?
  guide           Guide?
  hotel           Hotel?
  restaurant      Restaurant?
  reviews         Review[]
  location        Location?        @relation("ServiceLoc", fields: [locationId], references: [id])
  owner           User             @relation("ServiceOwner", fields: [ownerId], references: [id])

  @@index([ownerId])
  @@index([locationId])
  @@map("UserService")
}

model Hotel {
  id               String      @id @map("hotel_id")
  name             String
  description      String?
  facility         String?
  rating           Decimal?    @db.Decimal(3, 1)
  image            String?
  breakfast        String?
  checkIn          String?
  checkOut         String?
  contact          String?
  facilities       Json?
  location_text    String?
  nearby_locations String[]    @default([])
  pet_allow        Boolean?
  pictures         String[]    @default([])
  star             Int?
  subtopic_ratings Json?
  type             String?
  service          UserService @relation(fields: [id], references: [id], onDelete: Cascade)
  rooms            Room[]

  @@map("Hotel")
}

model Room {
  id            String   @map("room_id")
  hotelId       String   @map("hotel_id")
  pricePerNight Decimal? @map("price_per_night") @db.Decimal(10, 2)
  bedType       String?  @map("bed_type")
  personPerRoom Int?     @map("person_per_room")
  description   String?
  image         String?
  facilities    String[] @default([])
  name          String?
  pictures      String[] @default([])
  size_sqm      Int?
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@id([id, hotelId])
  @@index([hotelId])
  @@map("Room")
}

model Guide {
  id          String      @id @map("guide_id")
  name        String
  description String?
  image      String?
  rating      Decimal? @db.Decimal(2,1)
  pay       Decimal?
  language    String?
  service     UserService @relation(fields: [id],     references: [id], onDelete: Cascade)
  @@map("Guide")
}

model CarRentalCenter {
  id          String      @id @map("crc_id")
  name        String
  description String?
  image       String?
  rating      Decimal? @db.Decimal(2,1)

  service     UserService @relation(fields: [id],     references: [id], onDelete: Cascade)
  cars        Car[]
  service     UserService @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("CarRentalCenter")
}

model Car {
  id          String          @id @map("car_id")
  crcId       String          @map("crc_id")
  pricePerDay Decimal?        @map("price_per_day") @db.Decimal(10, 2)
  model       String?
  description String?
  carseat     Int?
  image       String?
  status      String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  deletedAt   DateTime?       @map("deleted_at")
  center      CarRentalCenter @relation(fields: [crcId], references: [id], onDelete: Cascade)

  @@index([crcId])
  @@map("Car")
}

model Restaurant {
  id          String      @id @map("restaurant_id")
  name        String
  description String?
  menu        String?   @map("menu")
  image       String?
  rating      Decimal? 
  priceLevel  Int?     @map("price_level")
  service     UserService @relation(fields: [id],     references: [id], onDelete: Cascade)
  tables      Table[]

  @@map("Restaurant")
}

model Table {
  id           String     @map("table_id")
  restaurantId String     @map("restaurant_id")
  model        String?
  description  String?
  seat         Int?
  pricePerSeat Decimal?   @map("price_per_seat") @db.Decimal(10, 2)
  status       String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  deletedAt    DateTime?  @map("deleted_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([id, restaurantId])
  @@index([restaurantId])
  @@map("Table")
}

model Review {
  id        String      @id @map("review_id")
  serviceId String      @map("service_id")
  userId    String      @map("user_id") @db.Uuid
  comment   String?
  score     Int?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  status    String?
  image     String?
  service   UserService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([userId])
  @@map("Review")
}

model Bookmark {
  id        String      @id @map("bookmark_id")
  serviceId String      @map("service_id")
  userId    String      @map("user_id") @db.Uuid
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  status    String?
  service   UserService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([userId])
  @@map("Bookmark")
}

model Booking {
  id               String      @id @map("booking_id")
  serviceId        String      @map("service_id")
  groupId          String      @map("group_id")
  startBookingDate DateTime    @map("start_booking_date")
  endBookingDate   DateTime?   @map("end_booking_date")
  note             String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime?   @updatedAt @map("updated_at")
  status           String?
  group            Group       @relation(fields: [groupId], references: [id])
  service          UserService @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@index([groupId])
  @@map("Booking")
}

model Discount {
  id        String    @id @map("discount_id")
  ownerId   String    @map("owner_id") @db.Uuid
  value     Decimal?  @db.Decimal(10, 2)
  type      String?
  status    String?
  createdAt DateTime  @default(now()) @map("created_at")
  expiredAt DateTime? @map("expired_at")
  maker_id  String?   @map("maker_id") @db.Uuid
  maker     User?     @relation("DiscountMaker", fields: [maker_id], references: [id])
  owner     User      @relation("DiscountOwner", fields: [ownerId], references: [id])

  @@index([ownerId])
  @@map("Discount")
}
