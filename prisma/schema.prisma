generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) @map("user_id") @db.Uuid
  fname          String
  lname          String
  birthDate      DateTime?       @map("birth_date") @db.Date
  role           String?
  email          String          @unique
  password       String
  profileImg     String?         @map("profile_img")
  phone          String?
  status         String?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  username       String          @unique
  gender         String          @default("Other")
  bookmarks      Bookmark[]
  discountsMade  Discount[]      @relation("DiscountMaker")
  discounts      Discount[]      @relation("DiscountOwner")
  ownedGroups    Group[]         @relation("GroupOwner")
  reviews        Review[]
  ownedTripPlans TripPlan[]      @relation("TripPlanOwner")
  memberOf       UserJoinGroup[]
  services       UserService[]   @relation("ServiceOwner")
  transactions   Transaction[]
  expenses    ExpenseGroup[]
  expenseSpliters ExpenseSpliter[]
  payments    GroupUserPayment[]

  @@map("User")
}

model Group {
  id          String          @id @map("group_id")
  ownerId     String          @map("owner_id") @db.Uuid
  groupName   String          @map("group_name")
  groupImg    String?         @map("group_img")
  status      String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  tripPlansId String?         @map("trip_plans_id")
  description String?         @default("No description") @map("description")
  profileImg  String?         @map("profile_img")
  bookings    Booking[]
  owner       User            @relation("GroupOwner", fields: [ownerId], references: [id])
  tripPlans   TripPlan?       @relation(fields: [tripPlansId], references: [id])
  members     UserJoinGroup[]
  expenses    ExpenseGroup[]
  payments    GroupUserPayment[]

  @@index([ownerId])
  @@map("Group")
}

model ExpenseGroup {
  id        String   @id @map("expense_group_id")
  groupId   String   @map("group_id")
  userId    String   @map("user_id") @db.Uuid
  amount    Decimal? @db.Decimal(10, 2)
  note      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  spliters  ExpenseSpliter[]
  @@index([groupId])
  @@index([userId])
  @@map("ExpenseGroup")

}

model GroupUserPayment{
  id          String  @id @map("group_user_payment_id")
  groupId    String   @map("group_id")
  userId     String   @map("user_id") @db.Uuid
  status     String?
  bank       String?  @map("bank")
  accountNo  String?   @map("account_no")
  promtpayId  String?  @map("promptpay_id")
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId, userId])
  @@map("GroupUserPayment")
}

model ExpenseSpliter{
  id               String        @id @map("expense_spliter_id")
  expenseGroupId  String        @map("expense_group_id")
  userId          String        @map("user_id") @db.Uuid
  status          String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  expenseGroup   ExpenseGroup  @relation(fields: [expenseGroupId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expenseGroupId])
  @@index([userId])
  @@map("ExpenseSpliter")

}

model UserJoinGroup {
  groupId  String   @map("group_id")
  userId   String   @map("user_id") @db.Uuid
  status   String?
  joinDate DateTime @default(now()) @map("join_date")
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
  @@map("UserJoinGroup")
}

model TripPlan {
  id           String        @id @map("trip_id")
  ownerId      String        @map("owner_id") @db.Uuid
  createAt     DateTime      @default(now()) @map("create_at")
  updateAt     DateTime?     @updatedAt @map("update_at")
  deleteAt     DateTime?     @map("delete_at")
  tripName     String        @map("trip_name")
  tripImg      String?       @map("trip_img")
  status       String?
  note         String?
  startDate    DateTime?     @map("start_date") @db.Date
  endDate      DateTime?     @map("end_date") @db.Date
  groups       Group[]
  owner        User          @relation("TripPlanOwner", fields: [ownerId], references: [id])
  tripServices TripService[]
  units        TripUnit[]
  bookmarks    Bookmark[]

  @@index([ownerId])
  @@map("TripPlan")
}

model TripUnit {
  id             String    @id @map("unit_id")
  tripId         String    @map("trip_id")
  placeId        String?   @map("place_id")
  timeStampStart DateTime  @map("time_stamp_start")
  duration       Int?
  status         String?
  note           String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  serviceId      String?   @map("service_id")
  place          Place?    @relation(fields: [placeId], references: [id])
  service        Booking?  @relation(fields: [serviceId], references: [id])
  trip           TripPlan  @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([placeId])
  @@map("TripUnit")
}

model TripService {
  id        String      @id @map("trip_service_id")
  tripId    String      @map("trip_id")
  serviceId String      @map("service_id")
  date      DateTime    @map("date_time")
  meta      Json?        @map("meta")
  status    String?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  service   UserService @relation(fields: [serviceId], references: [id], onDelete: Cascade, map: "fk_tripservice_service")
  trip      TripPlan    @relation(fields: [tripId], references: [id], onDelete: Cascade, map: "fk_tripservice_trip")

  @@index([serviceId])
  @@index([tripId])
  @@map("TripService")
}

model Place {
  id          String     @id @default(uuid()) @map("place_id")
  locationId  String?    @map("location_id")
  name        String
  description String?
  placeImg    String[]   @map("place_img") @default([])
  
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime?  @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")
  isAttraction Boolean?  @map("is_attraction")
  status      String?
  location    Location?  @relation(fields: [locationId], references: [id])
  tripUnits   TripUnit[]
  reviews     Review[]

  @@index([locationId])
  @@map("Place")
}

model Location {
  id            String        @id @default(uuid()) @map("location_id")
  lat           Float
  long          Float
  name          String
  detail        String?
  status        String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime?     @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  country       String?
  province      String?
  address       String?
  district      String?
  street        String?
  zipCode       String?       @map("zip_code")
  places        Place[]
  servicesByLoc UserService[] @relation("ServiceLoc")

  @@map("Location")
}

model UserService {
  id              String           @id @default(uuid()) @map("service_id")
  ownerId         String           @map("owner_id") @db.Uuid
  locationId      String?          @map("location_id")
  name            String
  description     String?
  serviceImg      String?          @map("service_img")
  status          String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  type            String?
  bookings        Booking[]
  bookmarks       Bookmark[]
  carRentalCenter CarRentalCenter?
  guide           Guide?
  hotel           Hotel?
  restaurant      Restaurant?
  reviews         Review[]
  tripServices    TripService[]
  location        Location?        @relation("ServiceLoc", fields: [locationId], references: [id])
  owner           User             @relation("ServiceOwner", fields: [ownerId], references: [id])

  @@index([ownerId])
  @@index([locationId])
  @@map("UserService")
}

model Hotel {
  id              String      @id @map("hotel_id")
  type            String?
  star            Int?
  name            String
  description     String?
  pictures        String[]    @default([])
  facilities      Json?
  rating          Decimal?    @db.Decimal(3, 1)
  subtopicRatings Json?       @map("subtopic_ratings")


  breakfast       String?
  checkIn         String?
  checkOut        String?
  contact         String?
  
  locationSummary String?     @map("location_text")
  nearbyLocations String[]    @default([]) @map("nearby_locations")
  petAllow        Boolean?    @map("pet_allow")
  
 
  service         UserService @relation(fields: [id], references: [id], onDelete: Cascade)
  rooms           Room[]

  @@map("Hotel")
}

model Room {
  id            String   @map("room_id")
  hotelId       String   @map("hotel_id")

  name          String?
  pictures      String[] @default([])
  description   String?
  facilities    String[] @default([]) @map("facilities")
 
  sizeSqm       Int?     @map("size_sqm")

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  options       RoomOption[]


  @@id([id, hotelId])
  @@index([hotelId])
  @@map("Room")
}


model RoomOption {
  id       String   @id @default(uuid()) @map("room_option_id")
  roomId   String   @map("room_id")
  hotelId  String   @map("hotel_id")

  name     String
  bed      String?
  maxGuest Int?     @map("max_guest")
  price    Decimal? @db.Decimal(10, 2)
  room     Room     @relation(fields: [roomId, hotelId], references: [id, hotelId], onDelete: Cascade)

  @@unique([roomId, hotelId, name]) // ป้องกันซ้ำตามธรรมชาติ
  @@index([roomId, hotelId])
  @@map("RoomOption")
}



model Restaurant {
  id                String      @id @map("restaurant_id")
  name              String
  description       String?
  menu              String?
  image             String?
  rating            Decimal?    @db.Decimal(3, 1)
  priceLevel        Int?        @map("price_level")
  contact           String?
  contacts          Json?
  cuisine           String?
  dietaryTags       String[]    @default([])
  facilities        Json?
  facility          String?
  locationSummary   String?     @map("location_text")
  nearbyLocations   String[]    @default([]) @map("nearby_locations")
  openingHours      Json?       @map("opening_hours")
  paymentMethods    String[]    @default([]) @map("payment_methods")
  petAllow          Boolean?    @map("pet_allow")
  pictures          String[]    @default([])
  reservationPolicy Json?       @map("reservation_policy")
  services          String[]    @default([])
  subtopicRatings   Json?       @map("subtopic_ratings")
  type              String?
  service           UserService @relation(fields: [id], references: [id], onDelete: Cascade)
  tables            Table[]

  @@map("Restaurant")
}

/// ===================================
/// CAR RENTAL CENTER (rich like Hotel)
/// ===================================
model CarRentalCenter {
  id              String      @id @map("crc_id")
  name            String
  description     String?
  image           String?
  pictures        String[]    @default([])
  rating          Decimal?    @db.Decimal(3, 1)
  branches        Json?       @map("branches")
  contacts        Json?
  facilities      Json?
  nearbyLocations String[]    @default([]) @map("nearby_locations")
  openingHours    Json?       @map("opening_hours")
  paymentMethods  String[]    @default([]) @map("payment_methods")
  anotherServices  Json[]     @default([]) @map("another_services")

  requiredDocs    String[]    @default([]) @map("required_docs")
  subtopicRatings Json?       @map("subtopic_ratings")
  type            String?
  cars            Car[]
  service         UserService @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("CarRentalCenter")
}

/// รถให้เช่า (ถ้ายังไม่มีโมเดล Car ให้ใช้ด้านล่างนี้ได้)
model Car {
  name           String
  id             String          @id @map("car_id")
  crcId          String          @map("crc_id")

  type           String?
  pricePerDay    Decimal?        @map("price_per_day") @db.Decimal(10, 2)
  model          String?
  description    String?
  seats          Int?            @map("carseat")
  pictures       String[]        @default([])
  createdAt      DateTime?       @map("created_at")
  updatedAt      DateTime?       @map("updated_at")
  availability   Json?
  brand          String?
  currency       String?         @default("THB")

  deposit        Decimal?        @db.Decimal(10, 2)
  doors          Int?
  features       String[]        @default([])

  fuelType       String?
  fuelPolicy     String?         @map("fuel_policy")
  pickupLocation  String?         @map("pickup_location")
  insurance      Json?
  luggage        Int?
  mileageLimitKm Int?            @map("mileage_limit_km")

  pricePerHour   Decimal?        @map("price_per_hour") @db.Decimal(10, 2)
  transmission   String?
  year           Int?
  rentalCenter   CarRentalCenter @relation(fields: [crcId], references: [id], onDelete: Cascade)

  @@index([crcId])
  @@map("Car")
}

/// ===============================
/// GUIDE (rich like Hotel)
/// ===============================
model Guide {
  id              String      @id @map("guide_id")
  name            String
  description     String?
  image           String?
  rating          Decimal?    @db.Decimal(3, 1)
  pay             Decimal?    @map("pay")
  availability    Json?
  contact         String?
  contacts        Json?
  currency        String?     @default("THB")
  dayRate         Decimal?    @map("day_rate") @db.Decimal(10, 2)
  experienceYears Int?        @map("experience_years")
  hourlyRate      Decimal?    @map("hourly_rate") @db.Decimal(10, 2)
  languages       String[]    @default([])
  licenseId       String?     @map("license_id")
  locationSummary String?     @map("location_text")
  nearbyLocations String[]    @default([]) @map("nearby_locations")
  overtimeRate    Decimal?    @map("overtime_rate") @db.Decimal(10, 2)
  pictures        String[]    @default([])
  policies        Json?
  regionsCovered  String[]    @default([])
  specialties     String[]    @default([])
  subtopicRatings Json?       @map("subtopic_ratings")
  verified        Boolean?    @default(false)
  service         UserService @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("Guide")
}

model Table {
  id           String     @map("table_id")
  restaurantId String     @map("restaurant_id")
  model        String?
  description  String?
  seat         Int?
  pricePerSeat Decimal?   @map("price_per_seat") @db.Decimal(10, 2)
  status       String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  deletedAt    DateTime?  @map("deleted_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([id, restaurantId])
  @@index([restaurantId])
  @@map("Table")
}

model Review {
  id        String      @id @map("review_id")
  serviceId String?      @map("service_id")
  placeId   String?      @map("location_id")
  userId    String      @map("user_id") @db.Uuid
  comment   String?
  score1     Int?
  score2     Int?
  score3     Int?
  score4     Int?
  score5     Int?
  score6     Int?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  status    String?
  image     String[]   @default([])
  place     Place?   @relation(fields: [placeId], references: [id])
  service   UserService? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([userId])
  @@map("Review")
}

model Bookmark {
  id        String      @id @default(uuid()) @map("bookmark_id")
  serviceId String?      @map("service_id")
  tripId    String?     @map("trip_id")
  userId    String      @map("user_id") @db.Uuid
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  status    String?
  trip      TripPlan?   @relation(fields: [tripId], references: [id])
  service   UserService? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([userId])
  @@map("Bookmark")
}

model Booking {
  id               String      @id @default(uuid()) @map("booking_id")
  serviceId        String      @map("service_id")
  subServiceId     String?     @map("sub_service_id")
  groupId          String      @map("group_id")
  startBookingDate DateTime    @map("start_booking_date")
  endBookingDate   DateTime?   @map("end_booking_date")
  note             String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime?   @updatedAt @map("updated_at")
  status           String?
  price            Decimal?     @db.Decimal(10, 2)
  group            Group       @relation(fields: [groupId], references: [id])
  service          UserService @relation(fields: [serviceId], references: [id])
  tripUnits        TripUnit[]
  transactions      Transaction[]

  @@index([serviceId])
  @@index([groupId])
  @@map("Booking")
}

enum TransactionMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  PROMPTPAY
  E_WALLET
  QR
}
model Transaction {
  id            String             @id @default(uuid()) @map("tx_id")
  userId        String             @map("user_id") @db.Uuid
  bookingId     String             @map("booking_id")

  // วิธีชำระ/ผู้ให้บริการ/อ้างอิง
  method        TransactionMethod?
  amount        Decimal?           @db.Decimal(10, 2)

  // สถานะและเวลา
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime?          @updatedAt @map("updated_at")


  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking       Booking            @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookingId])
  @@map("Transaction")
}

model Discount {
  id        String    @id @map("discount_id")
  ownerId   String    @map("owner_id") @db.Uuid
  value     Decimal?  @db.Decimal(10, 2)
  type      String?
  status    String?
  createdAt DateTime  @default(now()) @map("created_at")
  expiredAt DateTime? @map("expired_at")
  maker_id  String?   @map("maker_id") @db.Uuid
  maker     User?     @relation("DiscountMaker", fields: [maker_id], references: [id])
  owner     User      @relation("DiscountOwner", fields: [ownerId], references: [id])

  @@index([ownerId])
  @@map("Discount")
}
